#BlueJ class context
comment0.target=PurseTest
comment0.text=\r\n\ Basic\ tests\ for\ Purse.\r\n\r\n\ @author\ \ Resident\ Evil\ (good\ testers\ are\ evil)\r\n
comment1.params=
comment1.target=void\ setUp()
comment1.text=\r\n\ Set\ up\ a\ test\ fixture.\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment10.params=
comment10.target=void\ testWithdrawUsesCurrency()
comment10.text=Test\ withdraw\ for\ multiple\ currencies.
comment11.params=money
comment11.target=double\ sumMoney(java.lang.Object[])
comment11.text=\ Parameter\ defined\ as\ Object\ so\ it\ works\ whether\ or\ not\ the\ student\ code\r\n\ \ has\ a\ Valuable\ interface.\r\n\ @param\ money\r\n\ @return\ sum\ of\ all\ values,\ ignoring\ currency\r\n
comment12.params=msg\ array
comment12.target=void\ assertEmptyOrNull(java.lang.String,\ java.lang.Object[])
comment2.params=
comment2.target=void\ testPurse()
comment2.text=\r\n\ Test\ constructor\ and\ capacity.\r\n
comment3.params=
comment3.target=void\ testInsert()
comment4.params=
comment4.target=void\ testCannotInsertZeroValue()
comment5.params=
comment5.target=void\ testInsertAndBalance()
comment5.text=\r\n\ Hard\ to\ test\ insert()\ without\ using\ getBalance,\r\n\ so\ I\ call\ this\ a\ test\ of\ both\r\n
comment6.params=
comment6.target=void\ testIsFull()
comment7.params=
comment7.target=void\ testSimpleWithdraw()
comment7.text=\r\n\ Test\ simple\ withdraw\ of\ 1\ coin\r\n
comment8.params=
comment8.target=void\ testWithdrawEverything()
comment8.text=\r\n\ Withdraw\ entire\ balance.\r\n\ Many\ student\ codes\ have\ problem\ with\ this.\r\n
comment9.params=
comment9.target=void\ testMultipleWithdraw()
comment9.text=\r\n\ Test\ withdraw\ requiring\ many\ coins.\r\n\ We\ only\ use\ 1,\ 5,\ and\ 10\ unit\ coins,\r\n\ so\ a\ greedy\ withdraw\ strategy\ should\ work.\r\n
numComments=13
